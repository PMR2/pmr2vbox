#!/bin/bash
set -e

# this may redefine the same existing vboxtools/utils version in the
# exact same way
warn () {
    echo $@ >&2
}

# TODO define permission policies

s3_region () {
    region=$(aws s3api get-bucket-location --bucket "${S3_BUCKET}")
    export AWS_DEFAULT_REGION=$region
    warn "S3_BUCKET '${S3_BUCKET}' is at region '${AWS_DEFAULT_REGION}'"
}

# 0. register the policy as per <https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html>

# this is NOT a date, it's the version number of the policy document format.
export AWS_POLICY_VERSION=2012-10-17

trust_policy_tmpl='{
   "Version": "${AWS_POLICY_VERSION}",
   "Statement": [
      {
         "Effect": "Allow",
         "Principal": { "Service": "vmie.amazonaws.com" },
         "Action": "sts:AssumeRole",
         "Condition": {
            "StringEquals":{
               "sts:Externalid": "vmimport"
            }
         }
      }
   ]
}
'

role_policy_tmpl='{
   "Version":"${AWS_POLICY_VERSION}",
   "Statement":[
      {
         "Effect":"Allow",
         "Action":[
            "s3:GetBucketLocation",
            "s3:ListBucket"
         ],
         "Resource":[
            "arn:aws:s3:::${S3_BUCKET}"
         ]
      },
      {
         "Effect":"Allow",
         "Action":[
            "s3:GetObject"
         ],
         "Resource":[
            "arn:aws:s3:::${S3_BUCKET}/*"
         ]
      },
      {
         "Effect":"Allow",
         "Action":[
            "ec2:ModifySnapshotAttribute",
            "ec2:CopySnapshot",
            "ec2:RegisterImage",
            "ec2:Describe*"
         ],
         "Resource":"*"
      }
   ]
}'

register_vmimport_role () {
    trust_policy_json=$(mktemp)
    role_policy_json=$(mktemp)
    echo "${trust_policy_tmpl}" |
        envsubst \${AWS_POLICY_VERSION},\${S3_BUCKET} > ${trust_policy_json}
    echo "${role_policy_tmpl}" |
        envsubst \${AWS_POLICY_VERSION},\${S3_BUCKET} > ${role_policy_json}

    aws iam get-role --role-name vmimport 2>/dev/null ||
    aws iam create-role \
        --role-name vmimport \
        --assume-role-policy-document file://${trust_policy_json} || trust=$?

    aws iam put-role-policy \
      --role-name vmimport \
      --policy-name vmimport \
      --policy-document file://${role_policy_json} || role=$?

    rm ${trust_policy_json} ${role_policy_json}

    if [[ $trust -ne 0 ]] || [[ $role -ne 0 ]]; then
        warn 'failed to create IAM role named `vmimport`'
        warn 'please refer to <https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html>'
        return 1
    fi
}

# 1. upload the image to S3.

upload_s3 () {
    src="$1"
    S3_KEY=${S3_KEY:-$(
        echo ${UPLOAD_IMG} | sed -r "s/(\.[^\.]*)$/-$(date -u +%Y%m%d)\1/")}
    # this one can just be played out normally
    # TODO check if S3_KEY exists, and skip the step if it is
    warn "uploading as '${S3_KEY}'"
    ret=0
    aws s3api head-object \
        --bucket "${S3_BUCKET}" \
        --key "${S3_KEY}" > /dev/null 2>&1 || ret=$?
    if [ $ret = 0 ]; then
        warn "s3://${S3_BUCKET}/${S3_KEY} already uploaded"
    else
        aws s3 cp "${src}" "s3://${S3_BUCKET}/${S3_KEY}"
    fi
}

# 2. S3 conversion to AWS Snapshot

s3_to_ec2_snapshot () {
   # TODO check that ${IMPORT_SNAPSHOT_TASK} is set and skip
   s3_task_output=$(aws ec2 import-snapshot --cli-input-json='{
    "DiskContainer": {
        "Description": "'"${S3_KEY}"'",
        "Format": "vhd",
        "UserBucket": {
            "S3Bucket": "'"${S3_BUCKET}"'",
            "S3Key": "'"${S3_KEY}"'"
        }
    }
}')
    export IMPORT_SNAPSHOT_TASK=$(echo "${s3_task_output}" | head -n1)
    warn "starting import snapshot task '${IMPORT_SNAPSHOT_TASK}'"
}

monitor_import () {
    if [ -z "${IMPORT_SNAPSHOT_TASK}" ]; then
        # TODO warning message
        return 2
    fi

    check_count=450
    interval=4

    for ((i=0; i <= $check_count; i++)) do
        output=$(aws ec2 describe-import-snapshot-tasks \
            --import-task-ids "${IMPORT_SNAPSHOT_TASK}")
        details=$(echo -e "${output}" | grep SNAPSHOTTASKDETAIL)
        state=$(echo -e "${details}" | rev | cut -f1 | rev)
        if [ "${state}" = "completed" ]; then
            EC2_SNAPSHOT=$(echo -e "${details}" | cut -f4)
            warn -e "\x1b[Ksnapshot '${EC2_SNAPSHOT}' imported"
            return 0
        fi
        progress=$(echo -e "${details}" | cut -f4)
        warn -ne "\x1b[K${IMPORT_SNAPSHOT_TASK}: ${progress}%\t${state}\r"
        sleep $interval
    done

    warn -e "\x1b[Kaborting due to time limit"
    return 1
}

ec2_snapshot_to_ami () {
    # TODO assign this to something to be used?
    # TODO link to subsequent /opt/zope snapshots?
    export AMI_ID=$(aws ec2 register-image --name "${S3_KEY}" --ena-support \
    --cli-input-json='{
    "Architecture": "x86_64",
    "BlockDeviceMappings": [
        {
            "DeviceName": "/dev/sda1",
            "Ebs": {
                "SnapshotId": "'${EC2_SNAPSHOT}'",
                "VolumeSize": 10,
                "VolumeType": "gp2"
            }
        }
    ],
    "Name": "'${S3_KEY}'",
    "RootDeviceName": "/dev/sda1",
    "VirtualizationType": "hvm"
}')
    warn "AMI '${AMI_ID}' created"
}
